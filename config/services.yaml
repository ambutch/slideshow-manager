# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    maxPhotoWidth: '%env(resolve:MAX_WIDTH)%'
    maxPhotoHeight: '%env(resolve:MAX_HEIGHT)%'
    locale: 'en'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true        # Automatically injects dependencies in your services.
        autoconfigure: true   # Automatically registers your services as commands, event subscribers, etc.
        public: false         # Allows optimizing the container by removing unused services; this also means
                              # fetching services directly from the container via $container->get() won't work.
                              # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\Service\:
        resource: '../src/Service'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Repository\:
        resource: '../src/Repository'
        tags: ['doctrine.repository_service']

    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    App\Command\:
        resource: '../src/Command'
        tags: ['console.command']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    Intervention\Image\ImageManager:
        class: Intervention\Image\ImageManager
        arguments: [driver: 'gd']

    League\Glide\Manipulators\Orientation:
        class: League\Glide\Manipulators\Orientation

    League\Glide\Manipulators\Crop:
        class: League\Glide\Manipulators\Crop

    League\Glide\Manipulators\Encode:
        class: League\Glide\Manipulators\Encode

    League\Glide\Manipulators\Size:
        class: League\Glide\Manipulators\Size

    League\Glide\Api\Api:
        class: League\Glide\Api\Api
        arguments:
            - '@Intervention\Image\ImageManager'
            -
                - '@League\Glide\Manipulators\Orientation'
                - '@League\Glide\Manipulators\Crop'
                - '@League\Glide\Manipulators\Size'
                - '@League\Glide\Manipulators\Encode'

    League\Glide\Responses\SymfonyResponseFactory:
        class: League\Glide\Responses\SymfonyResponseFactory

    League\Glide\Server:
        class: League\Glide\Server
        autowire: false
        public: true
        arguments:
            - '@photos_filesystem'
            - '@cache_filesystem'
            - '@League\Glide\Api\Api'
        calls:
            - method: setResponseFactory
              arguments:
                  - '@League\Glide\Responses\SymfonyResponseFactory'

    App\Service\SourceDirectoryManager:
        class: App\Service\SourceDirectoryManager
        autowire: false
        public: true
        arguments:
            - '@doctrine.orm.default_entity_manager'
            - '@photos_filesystem'

    App\Service\ImageManipulator:
        class: App\Service\ImageManipulator
        autowire: false
        public: true
        arguments:
            - '@photos_filesystem'
            - '@pseudocache_filesystem'
            - '@League\Glide\Api\Api'
        calls:
            - method: setDefaults
              arguments:
                  -
                      w: '%maxPhotoWidth%'
                      h: '%maxPhotoHeight%'
                      fit: max
            - method: setDestination
              arguments:
                  - '@slideshow_filesystem'

#    App\Service\PublishManager:
#        class: App\Service\PublishManager
#        autowire: false
#        public: true
#        arguments:
#            - '@App\Repository\PhotoRepository'
#            - '@App\Service\ImageManipulator'

    App\Service\ApiHandler\Directory:
        tags:
        - { name: "api.api", api: "directory" }

    App\Service\ApiHandler\Photo:
        tags:
        - { name: "api.api", api: "photo" }
